# coding: utf-8

"""
    Survive the Dungeon API

    API for the online features of Survive the Dungeon game.  Play the game here: https://replit.com/@mattiselin/Survive-the-Dungeon?v=1  The game does not depend on online play at all, but this API offers some socialfeatures that would otherwise not be present.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api import schemas  # noqa: F401


class Tombstone(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "at",
            "seed",
            "last_logs",
            "x",
            "y",
            "player",
        }
        
        class properties:
            player = schemas.StrSchema
            x = schemas.IntSchema
            y = schemas.IntSchema
            last_logs = schemas.StrSchema
            at = schemas.DateTimeSchema
            seed = schemas.IntSchema
            __annotations__ = {
                "player": player,
                "x": x,
                "y": y,
                "last_logs": last_logs,
                "at": at,
                "seed": seed,
            }
    
    at: MetaOapg.properties.at
    seed: MetaOapg.properties.seed
    last_logs: MetaOapg.properties.last_logs
    x: MetaOapg.properties.x
    y: MetaOapg.properties.y
    player: MetaOapg.properties.player
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player"]) -> MetaOapg.properties.player: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_logs"]) -> MetaOapg.properties.last_logs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["player", "x", "y", "last_logs", "at", "seed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player"]) -> MetaOapg.properties.player: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_logs"]) -> MetaOapg.properties.last_logs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["at"]) -> MetaOapg.properties.at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["player", "x", "y", "last_logs", "at", "seed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        at: typing.Union[MetaOapg.properties.at, str, datetime, ],
        seed: typing.Union[MetaOapg.properties.seed, decimal.Decimal, int, ],
        last_logs: typing.Union[MetaOapg.properties.last_logs, str, ],
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, ],
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, ],
        player: typing.Union[MetaOapg.properties.player, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Tombstone':
        return super().__new__(
            cls,
            *args,
            at=at,
            seed=seed,
            last_logs=last_logs,
            x=x,
            y=y,
            player=player,
            _configuration=_configuration,
            **kwargs,
        )
